esphome:
  name: sm

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

i2c:
  - id: bus_a
    sda: GPIO7
    scl: GPIO9
    frequency: 800kHz

uart:
  rx_pin: GPIO20
  tx_pin: GPIO21
  baud_rate: 9600

# buttons
binary_sensor:
  - platform: gpio
    id: up
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - display_menu.up:
  - platform: gpio
    id: left
    pin:
      number: GPIO1
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - display_menu.left:
  - platform: gpio
    id: down
    pin:
      number: GPIO2
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - display_menu.down:
  - platform: gpio
    id: right
    pin:
      number: GPIO3
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - display_menu.right:
  - platform: gpio
    id: press
    pin:
      number: GPIO4
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - if:
          condition:
            display_menu.is_active: my_menu
          then:
            - display_menu.enter: my_menu
          else:
            - display_menu.show_main:  my_menu

# Declare a LCD menu
graphical_display_menu:
  id: my_menu
  display: my_display
  font: tiny_font
  active: false
  mode: joystick
  on_redraw:
    then:
      component.update: my_display
  on_enter:
    then:
      lambda: 'ESP_LOGI("display_menu", "root enter");'
  on_leave:
    then:
      lambda: 'ESP_LOGI("display_menu", "root leave");'
  items:
    - type: switch
      immediate_edit: true
      text: "Show CO2 only"
      switch: only_co2
    - type: select
      immediate_edit: true
      text: "On high CO2"
      select: high_co2
    - type: number
      immediate_edit: false
      text: "CO2 threshold"
      number: co2_thr
      format: "%.0f"
    - type: command
      text: 'Calibrate to 400'
      on_value:
        then:
          - senseair.background_calibration: senseair_s8
          - display_menu.hide: my_menu
          - delay: 60s
          - senseair.background_calibration_result: senseair_s8
    - type: command
      text: '[exit]'
      on_value:
        then:
          - display_menu.hide: my_menu

switch:
  - platform: template
    id: only_co2
    optimistic: true

select:
  - platform: template
    id: high_co2
    optimistic: true
    options:
      - 'blink'
      - 'LED'
      - 'off'

number:
  - platform: template
    id: co2_thr
    optimistic: true
    min_value: 800.
    max_value: 2000.
    step: 100



bme68x_bsec2_i2c:
  i2c_id: bus_a
  address: 0x77
  model: bme680
  operating_age: 28d
  sample_rate: LP
  supply_voltage: 3.3V

sensor:
  - platform: senseair
    co2:
      name: "SenseAir CO2 Value"
      id: senseair_co2
    update_interval: 30s
    id: senseair_s8
  - platform: bme68x_bsec2
    temperature:
      name: "BME68x Temperature"
      id: temp
    pressure:
      id: pressure
      name: "BME68x Pressure"
    humidity:
      id: humidity
      name: "BME68x Humidity"
    iaq:
      name: "BME68x IAQ"
      id: iaq
    iaq_accuracy:
      name: "BME68x IAQ Accuarcy"
      id: iaq_accuracy
    co2_equivalent:
      name: "BME68x CO2 Equivalent"
    breath_voc_equivalent:
      name: "BME68x Breath VOC Equivalent"

output:
  - platform: gpio
    pin: GPIO8
    id: gpio_led
    inverted: true

font:
  - file: "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    id: huge_font
    size: 45
  - file: "/usr/share/fonts/truetype/terminus/TerminusTTF-4.46.0.ttf"
    id: large_font
    size: 32
  - file: "/usr/share/fonts/truetype/terminus/TerminusTTF-4.46.0.ttf"
    id: medium_font
    size: 20
  - file: "/usr/share/fonts/truetype/terminus/TerminusTTF-4.46.0.ttf"
    id: small_font
    size: 14
  - file: "/usr/share/fonts/truetype/terminus/TerminusTTF-4.46.0.ttf"
    id: tiny_font
    size: 12

display:
  - platform: ssd1306_i2c
    brightness: 100%
    model: "SSD1306 128x64"
    address: 0x3C
    i2c_id: bus_a
    id: my_display
    pages:
      - id: co2_page
        lambda: |-
          it.fill(COLOR_OFF);
          if (id(only_co2).state) {
            it.printf(64, 32, id(huge_font), COLOR_ON, TextAlign::CENTER, "%.0f", id(senseair_co2).state);
          } else {
            it.print(0, 4, id(medium_font), COLOR_ON, "CO");
            it.print(20, 10, id(small_font), COLOR_ON, "2");
            it.printf(75, 14, id(large_font), COLOR_ON, TextAlign::CENTER, "%.0f", id(senseair_co2).state);
            it.printf(0, 28, id(medium_font), COLOR_ON, "%.0f°C %.0f%%", id(temp).state, id(humidity).state);
            it.printf(0, 50, id(small_font), COLOR_ON, "%.0fhPa IAQ %.0f%c", id(pressure).state, id(iaq).state,
              (id(iaq_accuracy).state == 3 ? ' ' : '?') );
          }
      - id: co2_page_inv
        lambda: |-
          it.fill(COLOR_ON);
          if (id(only_co2).state) {
            it.printf(64, 32, id(huge_font), COLOR_OFF, TextAlign::CENTER, "%.0f", id(senseair_co2).state);
          } else {
            it.print(0, 4, id(medium_font), COLOR_OFF, "CO");
            it.print(20, 10, id(small_font), COLOR_OFF, "2");
            it.printf(75, 14, id(large_font), COLOR_OFF, TextAlign::CENTER, "%.0f", id(senseair_co2).state);
            it.printf(0, 28, id(medium_font), COLOR_OFF, "%.0f°C %.0f%%", id(temp).state, id(humidity).state);
            it.printf(0, 50, id(small_font), COLOR_OFF, "%.0fhPa IAQ %.0f%c", id(pressure).state, id(iaq).state,
              (id(iaq_accuracy).state == 3 ? ' ' : '?') );
          }

interval:
  - interval: 1s
    then:
      - lambda: |-
          static int seconds = 0;
          seconds = (seconds + 1) % 60;
          if (
            id(high_co2).state == "LED" &&
            id(senseair_co2).state > id(co2_thr).state &&
            seconds % 2 == 0
          ) {
            id(gpio_led).turn_on();
          } else {
            id(gpio_led).turn_off();
          }
      - if:
          condition:
            not:
              display_menu.is_active: my_menu
          then:
            - display.page.show: !lambda |-
                static int seconds = 0;
                int off;
                seconds = (seconds + 1) % 60;
                if (
                  id(high_co2).state == "blink" &&
                  id(senseair_co2).state > id(co2_thr).state
                ) {
                  off = seconds % 2;
                } else {
                  off = 1;
                }
                return off ? id(co2_page) : id(co2_page_inv);
            - component.update: my_display
